@page "/admin/webusers"
@layout AdminLayout
@using NihongoBot.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="d-flex justify-content-between align-items-center mb-4">
	<h1>Web Admin Users</h1>
	<button class="btn btn-primary" @onclick="ShowCreateModal">
		<i class="fas fa-plus"></i> Add User
	</button>
</div>

@if (users.Any())
{
	<div class="table-responsive">
		<table class="table table-striped">
			<thead class="table-dark">
				<tr>
					<th>Username</th>
					<th>Email</th>
					<th>Name</th>
					<th>Status</th>
					<th>Last Login</th>
					<th>Created</th>
					<th>Actions</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var user in users)
				{
					<tr>
						<td>@user.Username</td>
						<td>@user.Email</td>
						<td>@user.FirstName @user.LastName</td>
						<td>
							<span class="badge @(user.IsEnabled ? "bg-success" : "bg-danger")">
								@(user.IsEnabled ? "Enabled" : "Disabled")
							</span>
						</td>
						<td>@(user.LastLoginAt?.ToString("MMM dd, yyyy HH:mm") ?? "Never")</td>
						<td>@user.CreatedAt?.ToString("MMM dd, yyyy")</td>
						<td>
							<div class="btn-group btn-group-sm" role="group">
								<button class="btn btn-outline-primary" @onclick="() => ShowEditModal(user)">
									<i class="fas fa-edit"></i>
								</button>
								<button class="btn btn-outline-danger" @onclick="() => ConfirmDelete(user)">
									<i class="fas fa-trash"></i>
								</button>
							</div>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}
else
{
	<div class="alert alert-info">
		<i class="fas fa-info-circle"></i> No web admin users found.
	</div>
}

<!-- Create User Modal -->
@if (showCreateModal)
{
	<div class="modal fade show d-block" tabindex="-1">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Add New Web User</h5>
					<button type="button" class="btn-close" @onclick="HideCreateModal"></button>
				</div>
				<div class="modal-body">
					@if (!string.IsNullOrEmpty(createErrorMessage))
					{
						<div class="alert alert-danger">@createErrorMessage</div>
					}

					<EditForm Model="createRequest" OnValidSubmit="HandleCreate">
						<DataAnnotationsValidator />
						<ValidationSummary class="text-danger" />

						<div class="mb-3">
							<label class="form-label">Username</label>
							<InputText class="form-control" @bind-Value="createRequest.Username" />
							<ValidationMessage For="() => createRequest.Username" class="text-danger" />
						</div>

						<div class="mb-3">
							<label class="form-label">Email</label>
							<InputText type="email" class="form-control" @bind-Value="createRequest.Email" />
							<ValidationMessage For="() => createRequest.Email" class="text-danger" />
						</div>

						<div class="row">
							<div class="col-md-6">
								<div class="mb-3">
									<label class="form-label">First Name</label>
									<InputText class="form-control" @bind-Value="createRequest.FirstName" />
									<ValidationMessage For="() => createRequest.FirstName" class="text-danger" />
								</div>
							</div>
							<div class="col-md-6">
								<div class="mb-3">
									<label class="form-label">Last Name</label>
									<InputText class="form-control" @bind-Value="createRequest.LastName" />
									<ValidationMessage For="() => createRequest.LastName" class="text-danger" />
								</div>
							</div>
						</div>

						<div class="mb-3">
							<label class="form-label">Password</label>
							<InputText type="password" class="form-control" @bind-Value="createRequest.Password" />
							<ValidationMessage For="() => createRequest.Password" class="text-danger" />
						</div>

						<div class="mb-3">
							<label class="form-label">Confirm Password</label>
							<InputText type="password" class="form-control" @bind-Value="createRequest.ConfirmPassword" />
							<ValidationMessage For="() => createRequest.ConfirmPassword" class="text-danger" />
						</div>

						<div class="modal-footer">
							<button type="button" class="btn btn-secondary" @onclick="HideCreateModal">Cancel</button>
							<button type="submit" class="btn btn-primary" disabled="@isCreating">
								@if (isCreating)
								{
									<span class="spinner-border spinner-border-sm me-2"></span>
								}
								Create User
							</button>
						</div>
					</EditForm>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show"></div>
}

<!-- Edit User Modal -->
@if (showEditModal && editingUser != null)
{
	<div class="modal fade show d-block" tabindex="-1">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Edit User - @editingUser.Username</h5>
					<button type="button" class="btn-close" @onclick="HideEditModal"></button>
				</div>
				<div class="modal-body">
					@if (!string.IsNullOrEmpty(editErrorMessage))
					{
						<div class="alert alert-danger">@editErrorMessage</div>
					}

					<EditForm Model="updateRequest" OnValidSubmit="HandleUpdate">
						<DataAnnotationsValidator />
						<ValidationSummary class="text-danger" />

						<div class="mb-3">
							<label class="form-label">Email</label>
							<InputText type="email" class="form-control" @bind-Value="updateRequest.Email" />
							<ValidationMessage For="() => updateRequest.Email" class="text-danger" />
						</div>

						<div class="row">
							<div class="col-md-6">
								<div class="mb-3">
									<label class="form-label">First Name</label>
									<InputText class="form-control" @bind-Value="updateRequest.FirstName" />
									<ValidationMessage For="() => updateRequest.FirstName" class="text-danger" />
								</div>
							</div>
							<div class="col-md-6">
								<div class="mb-3">
									<label class="form-label">Last Name</label>
									<InputText class="form-control" @bind-Value="updateRequest.LastName" />
									<ValidationMessage For="() => updateRequest.LastName" class="text-danger" />
								</div>
							</div>
						</div>

						<div class="mb-3 form-check">
							<InputCheckbox class="form-check-input" @bind-Value="updateRequest.IsEnabled" />
							<label class="form-check-label">Enabled</label>
						</div>

						<div class="modal-footer">
							<button type="button" class="btn btn-secondary" @onclick="HideEditModal">Cancel</button>
							<button type="submit" class="btn btn-primary" disabled="@isUpdating">
								@if (isUpdating)
								{
									<span class="spinner-border spinner-border-sm me-2"></span>
								}
								Update User
							</button>
						</div>
					</EditForm>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show"></div>
}

@code {
	private List<WebUserDto> users = new();
	private CreateWebUserRequest createRequest = new();
	private UpdateWebUserRequest updateRequest = new();
	private WebUserDto? editingUser;

	private bool showCreateModal = false;
	private bool showEditModal = false;
	private bool isCreating = false;
	private bool isUpdating = false;

	private string createErrorMessage = string.Empty;
	private string editErrorMessage = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await LoadUsers();
	}

	private async Task LoadUsers()
	{
		try
		{
			var response = await Http.GetAsync("/api/webusers");
			if (response.IsSuccessStatusCode)
			{
				users = await response.Content.ReadFromJsonAsync<List<WebUserDto>>() ?? new();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading users: {ex.Message}");
		}
	}

	private void ShowCreateModal()
	{
		createRequest = new();
		createErrorMessage = string.Empty;
		showCreateModal = true;
	}

	private void HideCreateModal()
	{
		showCreateModal = false;
	}

	private void ShowEditModal(WebUserDto user)
	{
		editingUser = user;
		updateRequest = new()
		{
			Email = user.Email,
			FirstName = user.FirstName,
			LastName = user.LastName,
			IsEnabled = user.IsEnabled
		};
		editErrorMessage = string.Empty;
		showEditModal = true;
	}

	private void HideEditModal()
	{
		showEditModal = false;
		editingUser = null;
	}

	private async Task HandleCreate()
	{
		isCreating = true;
		createErrorMessage = string.Empty;

		try
		{
			var response = await Http.PostAsJsonAsync("/api/webusers", createRequest);
			if (response.IsSuccessStatusCode)
			{
				HideCreateModal();
				await LoadUsers();
			}
			else
			{
				var content = await response.Content.ReadAsStringAsync();
				createErrorMessage = content;
			}
		}
		catch (Exception ex)
		{
			createErrorMessage = $"Error: {ex.Message}";
		}
		finally
		{
			isCreating = false;
		}
	}

	private async Task HandleUpdate()
	{
		if (editingUser == null) return;

		isUpdating = true;
		editErrorMessage = string.Empty;

		try
		{
			var response = await Http.PutAsJsonAsync($"/api/webusers/{editingUser.Id}", updateRequest);
			if (response.IsSuccessStatusCode)
			{
				HideEditModal();
				await LoadUsers();
			}
			else
			{
				var content = await response.Content.ReadAsStringAsync();
				editErrorMessage = content;
			}
		}
		catch (Exception ex)
		{
			editErrorMessage = $"Error: {ex.Message}";
		}
		finally
		{
			isUpdating = false;
		}
	}

	private async Task ConfirmDelete(WebUserDto user)
	{
		var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete user '{user.Username}'? This action cannot be undone.");
		if (confirmed)
		{
			await DeleteUser(user);
		}
	}

	private async Task DeleteUser(WebUserDto user)
	{
		try
		{
			var response = await Http.DeleteAsync($"/api/webusers/{user.Id}");
			if (response.IsSuccessStatusCode)
			{
				await LoadUsers();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error deleting user: {ex.Message}");
		}
	}
}