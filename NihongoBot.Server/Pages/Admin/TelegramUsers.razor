@page "/admin/telegram-users"
@attribute [Authorize]
@inject TelegramUserService TelegramUserService
@inject IJSRuntime JSRuntime

<PageTitle>Telegram Users</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Telegram Users</h1>
    <div>
        <span class="badge bg-primary">Total: @totalUsers</span>
        <span class="badge bg-success">Active: @activeUsers</span>
    </div>
</div>

<!-- Search and Filter -->
<div class="row mb-3">
    <div class="col-md-6">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search by username or Telegram ID" @bind="searchTerm" @onkeypress="@(async (e) => { if (e.Key == "Enter") await SearchUsers(); })">
            <button class="btn btn-outline-secondary" @onclick="SearchUsers">
                <i class="bi bi-search"></i> Search
            </button>
        </div>
    </div>
    <div class="col-md-6">
        <button class="btn btn-outline-primary" @onclick="LoadUsers">
            <i class="bi bi-arrow-clockwise"></i> Refresh
        </button>
    </div>
</div>

@if (loading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (users?.Any() == true)
{
    <!-- Users Table -->
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Username</th>
                    <th>Telegram ID</th>
                    <th>Streak</th>
                    <th>Questions/Day</th>
                    <th>Word of Day</th>
                    <th>Created</th>
                    <th>Last Updated</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td>
                            @if (!string.IsNullOrEmpty(user.Username))
                            {
                                <span class="fw-bold">@user.Username</span>
                            }
                            else
                            {
                                <span class="text-muted fst-italic">No username</span>
                            }
                        </td>
                        <td>
                            <code>@user.TelegramId</code>
                        </td>
                        <td>
                            @if (user.Streak > 0)
                            {
                                <span class="badge bg-success">@user.Streak</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">0</span>
                            }
                        </td>
                        <td>@user.QuestionsPerDay</td>
                        <td>
                            @if (user.WordOfTheDayEnabled)
                            {
                                <i class="bi bi-check-circle-fill text-success"></i>
                            }
                            else
                            {
                                <i class="bi bi-x-circle-fill text-danger"></i>
                            }
                        </td>
                        <td>
                            @if (user.CreatedAt.HasValue)
                            {
                                <small>@user.CreatedAt.Value.ToString("MM/dd/yyyy")</small>
                            }
                            else
                            {
                                <small class="text-muted">Unknown</small>
                            }
                        </td>
                        <td>
                            @if (user.UpdatedAt.HasValue)
                            {
                                <small>@user.UpdatedAt.Value.ToString("MM/dd/yyyy HH:mm")</small>
                            }
                            else
                            {
                                <small class="text-muted">Never</small>
                            }
                        </td>
                        <td>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(user)">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <nav aria-label="User pagination">
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage <= 1)">Previous</button>
            </li>
            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
            {
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                </li>
            }
            <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage >= totalPages)">Next</button>
            </li>
        </ul>
    </nav>
}
else
{
    <div class="alert alert-info">
        <i class="bi bi-info-circle"></i> No Telegram users found.
    </div>
}

@if (showDeleteConfirmation && userToDelete != null)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this Telegram user?</p>
                    <p><strong>Username:</strong> @(userToDelete.Username ?? "No username")</p>
                    <p><strong>Telegram ID:</strong> @userToDelete.TelegramId</p>
                    <p><strong>Streak:</strong> @userToDelete.Streak</p>
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle"></i>
                        This action cannot be undone. The user will lose all their progress.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteUser" disabled="@deleting">
                        @if (deleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Delete User
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<UserInfo>? users;
    private string searchTerm = "";
    private bool loading = true;
    private bool deleting = false;
    private bool showDeleteConfirmation = false;
    private UserInfo? userToDelete;
    
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalUsers = 0;
    private int activeUsers = 0;
    private int totalPages => (int)Math.Ceiling((double)totalUsers / pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        loading = true;
        try
        {
            var stats = await TelegramUserService.GetStatisticsAsync();
            totalUsers = stats.TotalUsers;
            activeUsers = stats.ActiveUsers;

            users = (await TelegramUserService.SearchUsersAsync(
                searchTerm, 
                (currentPage - 1) * pageSize, 
                pageSize)).ToList();
        }
        catch (Exception ex)
        {
            // Handle error - could show a toast notification
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task SearchUsers()
    {
        currentPage = 1;
        await LoadUsers();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadUsers();
        }
    }

    private void ConfirmDelete(UserInfo user)
    {
        userToDelete = user;
        showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        userToDelete = null;
        showDeleteConfirmation = false;
        deleting = false;
    }

    private async Task DeleteUser()
    {
        if (userToDelete == null) return;

        deleting = true;
        try
        {
            var success = await TelegramUserService.DeleteAsync(userToDelete.Id);
            if (success)
            {
                users?.Remove(userToDelete);
                totalUsers--;
                if (users?.Count == 0 && currentPage > 1)
                {
                    currentPage--;
                }
                await LoadUsers(); // Reload to get accurate counts
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error deleting user: {ex.Message}");
        }
        finally
        {
            CancelDelete();
        }
    }
}